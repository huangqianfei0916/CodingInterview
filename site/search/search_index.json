{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"JZ03-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/","text":"\u627e\u51fa\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57\u3002 \u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4 nums \u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u5728 0\uff5en-1 \u7684\u8303\u56f4\u5185\u3002\u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u91cd\u590d\u4e86\uff0c\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u4e86\u51e0\u6b21\u3002\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a [2, 3, 1, 0, 2, 5, 3] \u8f93\u51fa\uff1a2 \u6216 3 \u9650\u5236\uff1a 2 <= n <= 100000 \u89e3\u6cd5\u4e00\uff1a\u901a\u8fc7set\u8f85\u52a9\u5b9e\u73b0 * \u65f6\u95f4\u590d\u6742\u5ea6\uff1ao(N) * \u7a7a\u95f4\u590d\u6742\u5ea6\uff1ao(N) int findRepeatNumber(vector<int>& nums) { set<int> nums_set; for (int i = 0; i < nums.size(); ++i) { if (nums_set.find(nums[i]) == nums_set.end()) { nums_set.insert(nums[i]); } else { return nums[i]; } } return -1; } \u89e3\u6cd5\u4e8c\uff1a\u539f\u5730hash * \u65f6\u95f4\u590d\u6742\u5ea6\uff1ao(N) * \u7a7a\u95f4\u590d\u6742\u5ea6\uff1ao(1) int findRepeatNumber(vector<int>& nums) { for (int i = 0; i < nums.size(); ++i) { while (nums[i] != nums[nums[i]]) { swap(nums[i], nums[nums[i]]); } } for (int i = 0; i < nums.size(); ++i) { if (i != nums[i]) { return nums[i]; } } return -1; }","title":"JZ03 \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57"},{"location":"JZ04-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/","text":"\u5728\u4e00\u4e2a n * m \u7684\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff0c\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3 \u975e\u9012\u51cf \u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b \u975e\u9012\u51cf \u7684\u987a\u5e8f\u6392\u5e8f\u3002\u8bf7\u5b8c\u6210\u4e00\u4e2a\u9ad8\u6548\u7684\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002 \u793a\u4f8b: \u73b0\u6709\u77e9\u9635 matrix \u5982\u4e0b\uff1a [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] * \u7ed9\u5b9a target = 5\uff0c\u8fd4\u56de true\u3002 * \u7ed9\u5b9a target = 20\uff0c\u8fd4\u56de false\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n+m) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) \u89e3\u6cd5\uff1a\u6839\u636e\u53f3\u4e0a\u89d2target\u8fdb\u884c\u641c\u7d22 bool findNumberIn2DArray(vector<vector<int>>& matrix, int target) { if (matrix.size() == 0) { return false; } int row = 0; int col = matrix[0].size() - 1; int rows = matrix.size(); while (row < rows && col >= 0) { if (target == matrix[row][col]) { return true; } if (target > matrix[row][col]) { ++row; } else { --col; } } return false; }","title":"JZ04 \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e"},{"location":"JZ05-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/","text":"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u628a\u5b57\u7b26\u4e32 s \u4e2d\u7684\u6bcf\u4e2a\u7a7a\u683c\u66ff\u6362\u6210\"%20\"\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1as = \"We are happy.\" \u8f93\u51fa\uff1a\"We%20are%20happy.\" \u89e3\u6cd5\u4e00 * \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n) * \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n) string replaceSpace(string s) { string res = \"\"; for (auto item : s) { if (item == ' ') { res += \"%20\"; } else { res += item; } } return res; } \u89e3\u6cd5\u4e8c * \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n) * \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) string replaceSpace(string s) { int count = 0, len = s.size(); for (auto c : s) { if (c == ' ') count++; } s.resize(len + 2 * count); // \u5012\u5e8f\u904d\u5386\u4fee\u6539 for(int i = len - 1, j = s.size() - 1; i >= 0; i--, j--) { if (s[i] != ' ') s[j] = s[i]; else { s[j - 2] = '%'; s[j - 1] = '2'; s[j] = '0'; j -= 2; } } return s; }","title":"JZ05 \u66ff\u6362\u7a7a\u683c"},{"location":"JZ06-%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/","text":"\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9\uff0c\u4ece\u5c3e\u5230\u5934\u53cd\u8fc7\u6765\u8fd4\u56de\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\uff08\u7528\u6570\u7ec4\u8fd4\u56de\uff09\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1ahead = [1,3,2] \u8f93\u51fa\uff1a[2,3,1] \u89e3\u6cd5\uff1a\u53cd\u8f6c\u94fe\u8868\uff0c\u6216\u8005\u7528\u6808\u8f85\u52a9 vector<int> reversePrint(ListNode* head) { ListNode* p = head; ListNode* q = head; head = NULL; vector<int> res; while (p) { q = p; p = p->next; q->next = head; head = q; } while (head) { res.push_back(head->val); head = head->next; } return res; }","title":"JZ06 \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868"},{"location":"JZ07-%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/","text":"\u8f93\u5165\u67d0\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8bf7\u6784\u5efa\u8be5\u4e8c\u53c9\u6811\u5e76\u8fd4\u56de\u5176\u6839\u8282\u70b9\u3002 \u5047\u8bbe\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u3002 Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7] Output: [3,9,20,null,null,15,7] \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n) vector<int> make_order(int start, int end, vector<int>& arr) { vector<int> temp; for (int i = start; i < end; ++i) { temp.push_back(arr[i]); } return temp; } TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) { if (preorder.size() == 0 || inorder.size() == 0) { return nullptr; } int root_value = preorder[0]; int index = 0; for (index = 0; index < inorder.size(); ++index) { if (root_value == inorder[index]) { break; } } TreeNode* root = new TreeNode(root_value); vector<int> pre_left = make_order(1, index + 1, preorder); vector<int> inorder_left = make_order(0, index, inorder); root->left = buildTree(pre_left, inorder_left); vector<int> pre_right = make_order(index + 1, preorder.size(), preorder); vector<int> inorder_right = make_order(index + 1, inorder.size(), inorder); root->right = buildTree(pre_right, inorder_right); return root; }","title":"JZ07 \u91cd\u5efa\u4e8c\u53c9\u6811"},{"location":"JZ09-%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/","text":"\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\u3002\u961f\u5217\u7684\u58f0\u660e\u5982\u4e0b\uff0c\u8bf7\u5b9e\u73b0\u5b83\u7684\u4e24\u4e2a\u51fd\u6570 appendTail \u548c deleteHead \uff0c\u5206\u522b\u5b8c\u6210\u5728\u961f\u5217\u5c3e\u90e8\u63d2\u5165\u6574\u6570\u548c\u5728\u961f\u5217\u5934\u90e8\u5220\u9664\u6574\u6570\u7684\u529f\u80fd\u3002(\u82e5\u961f\u5217\u4e2d\u6ca1\u6709\u5143\u7d20\uff0cdeleteHead \u64cd\u4f5c\u8fd4\u56de -1 ) \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a [\"CQueue\",\"appendTail\",\"deleteHead\",\"deleteHead\",\"deleteHead\"] [[],[3],[],[],[]] \u8f93\u51fa\uff1a[null,null,3,-1,-1] \u89e3\u6cd5\uff1a class CQueue { public: stack<int> s1; stack<int> s2; CQueue() {} void appendTail(int value) { s1.push(value); } int deleteHead() { if (s2.size() == 0) { while (s1.size() != 0) { int temp = s1.top(); s1.pop(); s2.push(temp); } } int data = -1; if (s2.size() != 0) { data = s2.top(); s2.pop(); } return data; } }; /** * Your CQueue object will be instantiated and called as such: * CQueue* obj = new CQueue(); * obj->appendTail(value); * int param_2 = obj->deleteHead(); */","title":"JZ09 \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217"},{"location":"JZ10-1-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/","text":"\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165 n \uff0c\u6c42\u6590\u6ce2\u90a3\u5951\uff08Fibonacci\uff09\u6570\u5217\u7684\u7b2c n \u9879\uff08\u5373 F(N)\uff09\u3002\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a F(0) = 0, F(1) = 1 F(N) = F(N - 1) + F(N - 2), \u5176\u4e2d N > 1. \u6590\u6ce2\u90a3\u5951\u6570\u5217\u7531 0 \u548c 1 \u5f00\u59cb\uff0c\u4e4b\u540e\u7684\u6590\u6ce2\u90a3\u5951\u6570\u5c31\u662f\u7531\u4e4b\u524d\u7684\u4e24\u6570\u76f8\u52a0\u800c\u5f97\u51fa\u3002 \u7b54\u6848\u9700\u8981\u53d6\u6a21 1e9+7\uff081000000007\uff09\uff0c\u5982\u8ba1\u7b97\u521d\u59cb\u7ed3\u679c\u4e3a\uff1a1000000008\uff0c\u8bf7\u8fd4\u56de 1\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) class Solution { public: int fib(int n) { if (n < 2) { return n; } int a = 0; int b = 1; int fibn = 0; for (int i = 2; i <= n; ++i) { fibn = (a + b) % 1000000007; a = b; b = fibn; } return fibn; } };","title":"JZ10 1 \u6590\u6ce2\u90a3\u5951\u6570\u5217"},{"location":"JZ10-2-%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6%E9%97%AE%E9%A2%98/","text":"\u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a1\u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a2\u7ea7\u53f0\u9636\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2a n \u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 \u7b54\u6848\u9700\u8981\u53d6\u6a21 1e9+7\uff081000000007\uff09\uff0c\u5982\u8ba1\u7b97\u521d\u59cb\u7ed3\u679c\u4e3a\uff1a1000000008\uff0c\u8bf7\u8fd4\u56de 1\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1an = 2 \u8f93\u51fa\uff1a2 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1an = 7 \u8f93\u51fa\uff1a21 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1an = 0 \u8f93\u51fa\uff1a1 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) class Solution { public: int numWays(int n) { if (n <= 1) { return 1; } int fibn = 2; int a = 1; int b = 1; for (int i = 2; i <= n; ++i) { fibn = (a + b) % 1000000007; a = b; b = fibn; } return fibn; } };","title":"JZ10 2 \u9752\u86d9\u8df3\u53f0\u9636\u95ee\u9898"},{"location":"JZ11-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/","text":"\u628a\u4e00\u4e2a\u6570\u7ec4\u6700\u5f00\u59cb\u7684\u82e5\u5e72\u4e2a\u5143\u7d20\u642c\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6570\u7ec4\u7684\u65cb\u8f6c\u3002 \u7ed9\u4f60\u4e00\u4e2a\u53ef\u80fd\u5b58\u5728 \u91cd\u590d \u5143\u7d20\u503c\u7684\u6570\u7ec4 numbers \uff0c\u5b83\u539f\u6765\u662f\u4e00\u4e2a\u5347\u5e8f\u6392\u5217\u7684\u6570\u7ec4\uff0c\u5e76\u6309\u4e0a\u8ff0\u60c5\u5f62\u8fdb\u884c\u4e86\u4e00\u6b21\u65cb\u8f6c\u3002\u8bf7\u8fd4\u56de\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u5143\u7d20\u3002\u4f8b\u5982\uff0c\u6570\u7ec4 [3,4,5,1,2] \u4e3a [1,2,3,4,5] \u7684\u4e00\u6b21\u65cb\u8f6c\uff0c\u8be5\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u4e3a 1\u3002 \u6ce8\u610f\uff0c\u6570\u7ec4 [a[0], a[1], a[2], ..., a[n-1]] \u65cb\u8f6c\u4e00\u6b21 \u7684\u7ed3\u679c\u4e3a\u6570\u7ec4 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] \u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1anumbers = [3,4,5,1,2] \u8f93\u51fa\uff1a1 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1anumbers = [2,2,2,0,1] \u8f93\u51fa\uff1a0 \u89e3\u6cd5\u4e00\uff1a \u82e5\u662fmid \u6bd4r \u5927 \u8bc1\u660e mid\u5728\u5de6\u8fb9\uff0c \u6b64\u65f6mid\u4e00\u5b9a\u4e0d\u662f\u6700\u5c0f\uff0c \u56e0\u6b64\uff0c l = mid + 1 \u82e5\u662fmid \u6bd4r \u5c0f \u8bc1\u660e mid\u5728\u53f3\u4fa7\uff0c \u6b64\u65f6\u4e0d\u786e\u5b9amid \u662f\u4e0d\u662f\u6700\u5c0f\u3010mid\u53ef\u80fd\u6700\u5c0f\u3011\uff0c\u56e0\u6b64\uff0c r = mid \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logn) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) class Solution { public: int minArray(vector<int>& numbers) { int l = 0; int r = numbers.size() - 1; while (l <= r) { int mid = l + (r - l) / 2; if (l == r) { return numbers[l]; } if (numbers[mid] > numbers[r]) { l = mid + 1; } else if(numbers[mid] < numbers[r]) { r = mid; } else { // \u5b58\u5728\u91cd\u590d\u65f6\u5019,case: \u30103313\u3011 mid=3, r = 3\uff0c\u6b64\u65f6\u4e0d\u80fd r = mid, \u4f1a\u9519\u8fc7\u6700\u5c0f\u503c --r; } } return -1; } };","title":"JZ11 \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57"},{"location":"JZ12-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/","text":"\u7ed9\u5b9a\u4e00\u4e2a m x n \u4e8c\u7ef4\u5b57\u7b26\u7f51\u683c board \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5355\u8bcd word \u3002\u5982\u679c word \u5b58\u5728\u4e8e\u7f51\u683c\u4e2d\uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002 \u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7\u76f8\u90bb\u7684\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d\u201c\u76f8\u90bb\u201d\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002 \u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u7684 3\u00d74 \u7684\u77e9\u9635\u4e2d\u5305\u542b\u5355\u8bcd \"ABCCED\"\uff08\u5355\u8bcd\u4e2d\u7684\u5b57\u6bcd\u5df2\u6807\u51fa\uff09\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1aboard = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\" \u8f93\u51fa\uff1atrue \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1aboard = [[\"a\",\"b\"],[\"c\",\"d\"]], word = \"abcd\" \u8f93\u51fa\uff1afalse \u89e3\u6cd5\uff1adfs class Solution { public: vector<vector<bool>> vis; int index = 0; bool exist(vector<vector<char>>& board, string word) { int row = board.size(); int col = board[0].size(); vis.resize(row); for (int i = 0; i < row; ++i) { vis[i].resize(col); } bool flag = false; for (int i = 0; i < row; ++i) { for (int j = 0; j < col; ++j) { if (board[i][j] == word[0]) { flag = dfs (board, i, j, word, row, col); if (flag) { return flag; } } } } return flag; } bool dfs(vector<vector<char>>& board, int i, int j, string word, int row, int col) { if (index == word.size()) { return true; } if (i < 0 || i >= row || j >= col || j < 0 || board[i][j] != word[index] || vis[i][j]) { return false; } ++index; vis[i][j] = true; bool flag = dfs(board, i + 1, j, word, row, col) || dfs(board, i - 1, j, word, row, col) || dfs(board, i, j + 1, word, row, col) || dfs(board, i, j - 1, word, row, col); if (!flag) { --index; vis[i][j] = false; } return flag; } };","title":"JZ12 \u77e9\u9635\u4e2d\u7684\u8def\u5f84"},{"location":"JZ13-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/","text":"\u5730\u4e0a\u6709\u4e00\u4e2am\u884cn\u5217\u7684\u65b9\u683c\uff0c\u4ece\u5750\u6807 [0,0] \u5230\u5750\u6807 [m-1,n-1] \u3002\u4e00\u4e2a\u673a\u5668\u4eba\u4ece\u5750\u6807 [0, 0] \u7684\u683c\u5b50\u5f00\u59cb\u79fb\u52a8\uff0c\u5b83\u6bcf\u6b21\u53ef\u4ee5\u5411\u5de6\u3001\u53f3\u3001\u4e0a\u3001\u4e0b\u79fb\u52a8\u4e00\u683c\uff08\u4e0d\u80fd\u79fb\u52a8\u5230\u65b9\u683c\u5916\uff09\uff0c\u4e5f\u4e0d\u80fd\u8fdb\u5165\u884c\u5750\u6807\u548c\u5217\u5750\u6807\u7684\u6570\u4f4d\u4e4b\u548c\u5927\u4e8ek\u7684\u683c\u5b50\u3002\u4f8b\u5982\uff0c\u5f53k\u4e3a18\u65f6\uff0c\u673a\u5668\u4eba\u80fd\u591f\u8fdb\u5165\u65b9\u683c [35, 37] \uff0c\u56e0\u4e3a3+5+3+7=18\u3002\u4f46\u5b83\u4e0d\u80fd\u8fdb\u5165\u65b9\u683c [35, 38]\uff0c\u56e0\u4e3a3+5+3+8=19\u3002\u8bf7\u95ee\u8be5\u673a\u5668\u4eba\u80fd\u591f\u5230\u8fbe\u591a\u5c11\u4e2a\u683c\u5b50\uff1f \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1am = 2, n = 3, k = 1 \u8f93\u51fa\uff1a3 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1am = 3, n = 1, k = 0 \u8f93\u51fa\uff1a1 \u89e3\u6cd5\uff1adfs\uff0c\u548c12\u9898\u7684\u533a\u522b\u5728\u4e8e\uff0c\u8fd9\u91cc\u8bbf\u95ee\u8fc7\u4e4b\u540e\u5c31\u662ftrue\uff0c\u4e0d\u5b58\u5728\u91ca\u653e\u4e3afalse\u7684\u60c5\u51b5 class Solution { public: int sum_xy(int x, int y) { int sum = 0; while (x) { int temp = x % 10; x = x / 10; sum += temp; } while (y) { int temp = y % 10; y = y / 10; sum += temp; } return sum; } int res = 0; int movingCount(int m, int n, int k) { vector<vector<bool>> vis(m, vector<bool>(n, false)); dfs(m, n, 0, 0, k, vis); return res; } void dfs(int m, int n, int i, int j, int k, vector<vector<bool>>& vis) { if (i >= m || i < 0 || j >= n || j < 0 || vis[i][j]) { return; } if (sum_xy(i, j) > k) { return; } ++res; vis[i][j] = true; dfs(m, n, i + 1, j, k, vis); dfs(m, n, i - 1, j, k, vis); dfs(m, n, i, j + 1, k, vis); dfs(m, n, i, j - 1, k, vis); } };","title":"JZ13 \u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4"},{"location":"JZ14-%E5%89%AA%E7%BB%B3%E5%AD%90/","text":"\u7ed9\u4f60\u4e00\u6839\u957f\u5ea6\u4e3a n \u7684\u7ef3\u5b50\uff0c\u8bf7\u628a\u7ef3\u5b50\u526a\u6210\u6574\u6570\u957f\u5ea6\u7684 m \u6bb5\uff08m\u3001n\u90fd\u662f\u6574\u6570\uff0cn>1\u5e76\u4e14m>1\uff09\uff0c\u6bcf\u6bb5\u7ef3\u5b50\u7684\u957f\u5ea6\u8bb0\u4e3a k[0],k[1]...k[m-1] \u3002\u8bf7\u95ee k[0] k[1] ...*k[m-1] \u53ef\u80fd\u7684\u6700\u5927\u4e58\u79ef\u662f\u591a\u5c11\uff1f\u4f8b\u5982\uff0c\u5f53\u7ef3\u5b50\u7684\u957f\u5ea6\u662f8\u65f6\uff0c\u6211\u4eec\u628a\u5b83\u526a\u6210\u957f\u5ea6\u5206\u522b\u4e3a2\u30013\u30013\u7684\u4e09\u6bb5\uff0c\u6b64\u65f6\u5f97\u5230\u7684\u6700\u5927\u4e58\u79ef\u662f18\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 2 \u8f93\u51fa: 1 \u89e3\u91ca: 2 = 1 + 1, 1 \u00d7 1 = 1 \u793a\u4f8b 2: \u8f93\u5165: 10 \u8f93\u51fa: 36 \u89e3\u91ca: 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36 \u89e3\u6cd5\uff1a\u5c3d\u53ef\u80fd\u7684\u5212\u5206\u51fa \u591a\u76843 \u548c 2,\u8fd9\u6837\u5f97\u5230\u7684\u4e58\u79ef\u6700\u5927 \u5f53n\u5f88\u5927\u7684\u65f6\u5019\uff0c\u8981\u91c7\u7528\u5feb\u901f\u5e42\u7b97\u6cd5 class Solution { public: long quick_pow(int x, int n) { long res = 1; long temp = x; while (n != 0) { if (n % 2 == 0) { temp = temp * temp; temp = temp % 1000000007; n = n / 2; } else { res = res * temp; res = res % 1000000007; --n; } } return res; } int cuttingRope(int n) { if (n == 2) { return 1; } if (n == 3) { return 2; } int flag1 = n % 3; int flag2 = n / 3; if (flag1 == 0) { return quick_pow(3, flag2) % 1000000007; } else if (flag1 == 1) { return quick_pow(3, flag2 - 1) * 2 * 2 % 1000000007; } else { return quick_pow(3, flag2) * 2 % 1000000007; } } };","title":"JZ14 \u526a\u7ef3\u5b50"},{"location":"JZ15-%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/","text":"\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u6570\uff08\u4ee5\u4e8c\u8fdb\u5236\u4e32\u7684\u5f62\u5f0f\uff09\uff0c\u8fd4\u56de\u5176\u4e8c\u8fdb\u5236\u8868\u8fbe\u5f0f\u4e2d\u6570\u5b57\u4f4d\u6570\u4e3a '1' \u7684\u4e2a\u6570\uff08\u4e5f\u88ab\u79f0\u4e3a \u6c49\u660e\u91cd\u91cf).\uff09\u3002 \u63d0\u793a\uff1a \u8bf7\u6ce8\u610f\uff0c\u5728\u67d0\u4e9b\u8bed\u8a00\uff08\u5982 Java\uff09\u4e2d\uff0c\u6ca1\u6709\u65e0\u7b26\u53f7\u6574\u6570\u7c7b\u578b\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8f93\u5165\u548c\u8f93\u51fa\u90fd\u5c06\u88ab\u6307\u5b9a\u4e3a\u6709\u7b26\u53f7\u6574\u6570\u7c7b\u578b\uff0c\u5e76\u4e14\u4e0d\u5e94\u5f71\u54cd\u60a8\u7684\u5b9e\u73b0\uff0c\u56e0\u4e3a\u65e0\u8bba\u6574\u6570\u662f\u6709\u7b26\u53f7\u7684\u8fd8\u662f\u65e0\u7b26\u53f7\u7684\uff0c\u5176\u5185\u90e8\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u90fd\u662f\u76f8\u540c\u7684\u3002 \u5728 Java \u4e2d\uff0c\u7f16\u8bd1\u5668\u4f7f\u7528 \u4e8c\u8fdb\u5236\u8865\u7801 \u8bb0\u6cd5\u6765\u8868\u793a\u6709\u7b26\u53f7\u6574\u6570\u3002\u56e0\u6b64\uff0c\u5728\u4e0a\u9762\u7684 \u793a\u4f8b 3 \u4e2d\uff0c\u8f93\u5165\u8868\u793a\u6709\u7b26\u53f7\u6574\u6570 -3\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1an = 11 (\u63a7\u5236\u53f0\u8f93\u5165 00000000000000000000000000001011) \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u8f93\u5165\u7684\u4e8c\u8fdb\u5236\u4e32 00000000000000000000000000001011 \u4e2d\uff0c\u5171\u6709\u4e09\u4f4d\u4e3a '1'\u3002 \u89e3\u6cd5\uff1an = n & (n - 1) : \u662f\u8ba9n\u7684\u6700\u53f3\u8fb9\u76841\u53d8\u62100\uff0c\u6bcf\u6b21\u5c06\u6700\u53f3\u8fb9\u76841\u53d8\u62100\uff0c\u76f4\u5230n\u53d8\u62100\uff0c\u5373\u53ef\u6c42\u51fa\u6709\u591a\u5c11\u4e2a1 * \u65f6\u95f4\u590d\u6742\u5ea6o(logn) * \u7a7a\u95f4\u590d\u6742\u5ea6o(1) class Solution { public: int hammingWeight(uint32_t n) { int count = 0; while (n != 0) { n = n & (n - 1); ++count; } return count; } };","title":"JZ15 \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570"},{"location":"JZ16-%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/","text":"\u5b9e\u73b0 pow(x, n) \uff0c\u5373\u8ba1\u7b97 x \u7684 n \u6b21\u5e42\u51fd\u6570\uff08\u5373\uff0cxn\uff09\u3002\u4e0d\u5f97\u4f7f\u7528\u5e93\u51fd\u6570\uff0c\u540c\u65f6\u4e0d\u9700\u8981\u8003\u8651\u5927\u6570\u95ee\u9898\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1ax = 2.00000, n = 10 \u8f93\u51fa\uff1a1024.00000 \u89e3\u6cd5\uff1a\u5feb\u901f\u5e42 * \u65f6\u95f4\u590d\u6742\u5ea6o(logn) * \u7a7a\u95f4\u590d\u6742\u5ea6o(1) class Solution { public: double myPow(double x, int n) { double res = 1; double temp = x; long abs_n = abs(n); while (abs_n != 0) { if (abs_n % 2 == 0) { temp = temp * temp; abs_n = abs_n / 2; } else { res = res * temp; --abs_n; } } if (n < 0) { res = 1 / res; } return res; } };","title":"JZ16 \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9"},{"location":"JZ17-%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0/","text":"\u8f93\u5165\u6570\u5b57 n\uff0c\u6309\u987a\u5e8f\u6253\u5370\u51fa\u4ece 1 \u5230\u6700\u5927\u7684 n \u4f4d\u5341\u8fdb\u5236\u6570\u3002\u6bd4\u5982\u8f93\u5165 3\uff0c\u5219\u6253\u5370\u51fa 1\u30012\u30013 \u4e00\u76f4\u5230\u6700\u5927\u7684 3 \u4f4d\u6570 999\u3002 \u793a\u4f8b 1: \u8f93\u5165: n = 1 \u8f93\u51fa: [1,2,3,4,5,6,7,8,9] \u89e3\u6cd5\uff1a \u5168\u6392\u5217\uff0c\u6570\u7ec4\u662f\u30100-9\u3011\u65e0\u91cd\u590d\uff0c\u5143\u7d20\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528 class Solution { public: vector<int> res; vector<int> vec; vector<int> printNumbers(int n) { for (int i = 1; i <= n; ++i) { dfs(i); } return res; } void dfs(int len) { if (len == vec.size()) { int sum = 0; int n = len; for (auto& item : vec) { sum += item * pow(10, (n - 1)); --n; } res.push_back(sum); return; } for (int i = 0; i <= 9; ++i) { if (vec.size() == 0 && i == 0) { continue; } vec.push_back(i); dfs(len); vec.pop_back(); } } };","title":"JZ17 \u6253\u5370\u4ece1\u5230\u6700\u5927\u7684n\u4f4d\u6570"},{"location":"JZ18-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E8%8A%82%E7%82%B9/","text":"\u7ed9\u5b9a\u5355\u5411\u94fe\u8868\u7684\u5934\u6307\u9488\u548c\u4e00\u4e2a\u8981\u5220\u9664\u7684\u8282\u70b9\u7684\u503c\uff0c\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5220\u9664\u8be5\u8282\u70b9\u3002 \u8fd4\u56de\u5220\u9664\u540e\u7684\u94fe\u8868\u7684\u5934\u8282\u70b9\u3002 \u6ce8\u610f\uff1a\u6b64\u9898\u5bf9\u6bd4\u539f\u9898\u6709\u6539\u52a8 \u793a\u4f8b 1: \u8f93\u5165: head = [4,5,1,9], val = 5 \u8f93\u51fa: [4,1,9] \u89e3\u91ca: \u7ed9\u5b9a\u4f60\u94fe\u8868\u4e2d\u503c\u4e3a 5 \u7684\u7b2c\u4e8c\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u4f60\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5e94\u53d8\u4e3a 4 -> 1 -> 9. \u89e3\u6cd5: * \u65f6\u95f4\u590d\u6742\u5ea6o(n) * \u7a7a\u95f4\u590d\u6742\u5ea6o(1) /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ class Solution { public: ListNode* deleteNode(ListNode* head, int val) { ListNode* real_head = new ListNode(0); real_head->next = head; ListNode* p = head; ListNode* pre = real_head; while (p) { if (p->val == val) { pre->next = p->next; } p = p->next; pre = pre->next; } return real_head->next; } };","title":"JZ18 \u5220\u9664\u94fe\u8868\u7684\u8282\u70b9"},{"location":"JZ20-%E8%A1%A8%E7%A4%BA%E6%95%B0%E5%80%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/","text":"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u8868\u793a\u6570\u503c\uff08\u5305\u62ec\u6574\u6570\u548c\u5c0f\u6570\uff09\u3002 \u6570\u503c\uff08\u6309\u987a\u5e8f\uff09\u53ef\u4ee5\u5206\u6210\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a \u82e5\u5e72\u7a7a\u683c \u4e00\u4e2a \u5c0f\u6570 \u6216\u8005 \u6574\u6570 \uff08\u53ef\u9009\uff09\u4e00\u4e2a 'e' \u6216 'E' \uff0c\u540e\u9762\u8ddf\u7740\u4e00\u4e2a \u6574\u6570 \u82e5\u5e72\u7a7a\u683c \u5c0f\u6570\uff08\u6309\u987a\u5e8f\uff09\u53ef\u4ee5\u5206\u6210\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a \uff08\u53ef\u9009\uff09\u4e00\u4e2a\u7b26\u53f7\u5b57\u7b26\uff08'+' \u6216 '-'\uff09 \u4e0b\u8ff0\u683c\u5f0f\u4e4b\u4e00\uff1a \u81f3\u5c11\u4e00\u4f4d\u6570\u5b57\uff0c\u540e\u9762\u8ddf\u7740\u4e00\u4e2a\u70b9 '.' \u81f3\u5c11\u4e00\u4f4d\u6570\u5b57\uff0c\u540e\u9762\u8ddf\u7740\u4e00\u4e2a\u70b9 '.' \uff0c\u540e\u9762\u518d\u8ddf\u7740\u81f3\u5c11\u4e00\u4f4d\u6570\u5b57 \u4e00\u4e2a\u70b9 '.' \uff0c\u540e\u9762\u8ddf\u7740\u81f3\u5c11\u4e00\u4f4d\u6570\u5b57 \u6574\u6570\uff08\u6309\u987a\u5e8f\uff09\u53ef\u4ee5\u5206\u6210\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a \uff08\u53ef\u9009\uff09\u4e00\u4e2a\u7b26\u53f7\u5b57\u7b26\uff08'+' \u6216 '-'\uff09 \u81f3\u5c11\u4e00\u4f4d\u6570\u5b57 \u90e8\u5206\u6570\u503c\u5217\u4e3e\u5982\u4e0b\uff1a [\"+100\", \"5e2\", \"-123\", \"3.1416\", \"-1E-16\", \"0123\"] \u90e8\u5206\u975e\u6570\u503c\u5217\u4e3e\u5982\u4e0b\uff1a [\"12e\", \"1a3.14\", \"1.2.3\", \"+-5\", \"12e+5.4\"] \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1as = \"0\" \u8f93\u51fa\uff1atrue \u89e3\u6cd5\uff1a * \u65f6\u95f4\u590d\u6742\u5ea6o(n) * \u7a7a\u95f4\u590d\u6742\u5ea6o(1) class Solution { public: string& trim(string& s) { if (s.empty()) { return s; } s.erase(0, s.find_first_not_of(\" \\t\\r\\n\")); s.erase(s.find_last_not_of(\" \\t\\r\\n\") + 1); return s; } int index = 0; bool is_num(string s) { int start = index; for (int i = start; i < s.size(); ++i) { if (s[i] >= '0' && s[i] <= '9') { ++index; cout << \"dd\" << s[i] << endl; } else { break; } } return index > start; } bool isNumber(string s) { if (s.size() == 0) { return false; } s = trim(s); if (s[0] == '+' || s[0] == '-') { ++index; } bool flag = is_num(s); if (s[index] == '.') { ++index; flag = is_num(s) || flag; } if (s[index] == 'e' || s[index] == 'E') { ++index; if (s[index] == '-' || s[index] == '+') { ++index; } flag = flag && is_num(s); } return flag && index == s.size(); } };","title":"JZ20 \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32"},{"location":"JZ21-%E8%B0%83%E6%95%B4%E6%95%B0%E7%BB%84%E9%A1%BA%E5%BA%8F%E4%BD%BF%E5%A5%87%E6%95%B0%E4%BD%8D%E4%BA%8E%E5%81%B6%E6%95%B0%E5%89%8D%E9%9D%A2/","text":"\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u8c03\u6574\u8be5\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u6240\u6709\u5947\u6570\u5728\u6570\u7ec4\u7684\u524d\u534a\u90e8\u5206\uff0c\u6240\u6709\u5076\u6570\u5728\u6570\u7ec4\u7684\u540e\u534a\u90e8\u5206\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1anums = [1,2,3,4] \u8f93\u51fa\uff1a[1,3,2,4] \u6ce8\uff1a[3,1,2,4] \u4e5f\u662f\u6b63\u786e\u7684\u7b54\u6848\u4e4b\u4e00\u3002 \u89e3\u6cd5\uff1a\u53cc\u6307\u9488\u4e00\u6b21\u904d\u5386 * \u65f6\u95f4\u590d\u6742\u5ea6o(n) * \u7a7a\u95f4\u590d\u6742\u5ea6o(1) class Solution { public: vector<int> exchange(vector<int>& nums) { int len = nums.size(); vector<int> res(len); int left = 0; int right = len - 1; for (auto& item : nums) { if (item % 2 != 0) { res[left++] = item; } else { res[right--] = item; } } return res; } };","title":"JZ21 \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762"},{"location":"JZ22-%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/","text":"\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9\u3002\u4e3a\u4e86\u7b26\u5408\u5927\u591a\u6570\u4eba\u7684\u4e60\u60ef\uff0c\u672c\u9898\u4ece1\u5f00\u59cb\u8ba1\u6570\uff0c\u5373\u94fe\u8868\u7684\u5c3e\u8282\u70b9\u662f\u5012\u6570\u7b2c1\u4e2a\u8282\u70b9\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a\u94fe\u8868\u6709 6 \u4e2a\u8282\u70b9\uff0c\u4ece\u5934\u8282\u70b9\u5f00\u59cb\uff0c\u5b83\u4eec\u7684\u503c\u4f9d\u6b21\u662f 1\u30012\u30013\u30014\u30015\u30016\u3002\u8fd9\u4e2a\u94fe\u8868\u7684\u5012\u6570\u7b2c 3 \u4e2a\u8282\u70b9\u662f\u503c\u4e3a 4 \u7684\u8282\u70b9\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868: 1->2->3->4->5, \u548c k = 2. \u8fd4\u56de\u94fe\u8868 4->5. \u89e3\u6cd5\uff1a * \u65f6\u95f4\u590d\u6742\u5ea6o(n) * \u7a7a\u95f4\u590d\u6742\u5ea6o(1) /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ class Solution { public: ListNode* getKthFromEnd(ListNode* head, int k) { ListNode* p = head; ListNode* q = head; int len = 0; while (p) { p = p->next; ++len; } int gap = len - k; while (q && gap > 0) { q = q->next; --gap; } return q; } };","title":"JZ22 \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9"},{"location":"JZ24-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/","text":"\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9\uff0c\u53cd\u8f6c\u8be5\u94fe\u8868\u5e76\u8f93\u51fa\u53cd\u8f6c\u540e\u94fe\u8868\u7684\u5934\u8282\u70b9\u3002 \u793a\u4f8b: \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 5->4->3->2->1->NULL class Solution { public: ListNode* reverseList(ListNode* head) { ListNode* p = head; ListNode* q = head; head = nullptr; while (p) { q = p; p = p->next; q->next = head; head = q; } return head; } };","title":"JZ24 \u53cd\u8f6c\u94fe\u8868"},{"location":"JZ25-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/","text":"\u8f93\u5165\u4e24\u4e2a\u9012\u589e\u6392\u5e8f\u7684\u94fe\u8868\uff0c\u5408\u5e76\u8fd9\u4e24\u4e2a\u94fe\u8868\u5e76\u4f7f\u65b0\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u4ecd\u7136\u662f\u9012\u589e\u6392\u5e8f\u7684\u3002 \u793a\u4f8b1\uff1a \u8f93\u5165\uff1a1->2->4, 1->3->4 \u8f93\u51fa\uff1a1->1->2->3->4->4 \u89e3\u6cd5\uff1a * \u65f6\u95f4\u590d\u6742\u5ea6o(n + m) * \u7a7a\u95f4\u590d\u6742\u5ea6o(1) class Solution { public: ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) { ListNode* p = new ListNode(0); ListNode* phead = p; while (l1 != nullptr && l2 != nullptr) { if (l1->val < l2->val) { p->next = l1; l1 = l1->next; } else { p->next = l2; l2 = l2->next; } p = p->next; } p->next = l1 == nullptr ? l2 : l1; return phead->next; } };","title":"JZ25 \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868"},{"location":"JZ26-%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/","text":"\u8f93\u5165\u4e24\u68f5\u4e8c\u53c9\u6811A\u548cB\uff0c\u5224\u65adB\u662f\u4e0d\u662fA\u7684\u5b50\u7ed3\u6784\u3002(\u7ea6\u5b9a\u7a7a\u6811\u4e0d\u662f\u4efb\u610f\u4e00\u4e2a\u6811\u7684\u5b50\u7ed3\u6784) B\u662fA\u7684\u5b50\u7ed3\u6784\uff0c \u5373 A\u4e2d\u6709\u51fa\u73b0\u548cB\u76f8\u540c\u7684\u7ed3\u6784\u548c\u8282\u70b9\u503c\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1aA = [1,2,3], B = [3,1] \u8f93\u51fa\uff1afalse \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1aA = [3,4,5,1,2], B = [4,1] \u8f93\u51fa\uff1atrue \u89e3\u6cd5\uff1a \u5148\u5e8f\u904d\u5386 + \u5b50\u6811\u5224\u65ad /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public: bool isSubStructure(TreeNode* A, TreeNode* B) { if (B == nullptr || A == nullptr) { return false; } bool flag = false; if (A->val == B->val) { flag = judge(A, B); } if (!flag) { flag = isSubStructure(A->left, B); } if (!flag) { flag = isSubStructure(A->right, B); } return flag; } bool judge(TreeNode* t1, TreeNode* t2) { if (t1 == nullptr && t2 == nullptr) { return true; } if (t1 == nullptr && t2 != nullptr) { return false; } if (t1 != nullptr && t2 == nullptr) { return true; } if (t1->val != t2->val) { return false; } return judge(t1->left, t2->left) && judge(t1->right, t2->right); } };","title":"JZ26 \u6811\u7684\u5b50\u7ed3\u6784"},{"location":"JZ27-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/","text":"\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root\uff0c\u8bf7\u5de6\u53f3\u7ffb\u8f6c\u8fd9\u68f5\u4e8c\u53c9\u6811\uff0c\u5e76\u8fd4\u56de\u5176\u6839\u8282\u70b9\u3002 class Solution { public: TreeNode* mirrorTree(TreeNode* root) { if (root == nullptr) { return root; } TreeNode* temp = root->left; root->left = root->right; root->right = temp; mirrorTree(root->left); mirrorTree(root->right); return root; } };","title":"JZ27 \u7ffb\u8f6c\u4e8c\u53c9\u6811"},{"location":"JZ28-%E5%88%A4%E6%96%AD%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/","text":"\u5224\u65ad\u5bf9\u79f0\u4e8c\u53c9\u6811 class Solution { public: bool judge(TreeNode* t1, TreeNode* t2) { if (t1 == nullptr && t2 == nullptr) { return true; } if (t1 == nullptr || t2 == nullptr) { return false; } if (t1->val != t2->val) { return false; } return judge(t1->left, t2->right) && judge(t1->right, t2->left); } bool checkSymmetricTree(TreeNode* root) { if (root == nullptr) { return true; } bool flag = judge(root, root); return flag; } };","title":"JZ28 \u5224\u65ad\u5bf9\u79f0\u4e8c\u53c9\u6811"},{"location":"JZ29-%20%E8%9E%BA%E6%97%8B%E9%81%8D%E5%8E%86%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/","text":"\u87ba\u65cb\u904d\u5386\u4e8c\u7ef4\u6570\u7ec4 \u89e3\u6cd5\uff1a\u6a21\u62df * \u65f6\u95f4\u590d\u6742\u5ea6o(nm) * \u7a7a\u95f4\u590d\u6742\u5ea6o(1) class Solution { public: vector<int> spiralArray(vector<vector<int>>& array) { vector<int> res; if (array.size() == 0) { return res; } int left = 0; int right = array[0].size() - 1; int top = 0; int bottom = array.size() - 1; while (left <= right && top <= bottom) { for (int i = left; i <= right; ++i) { res.push_back(array[top][i]); } for (int i = top + 1; i <= bottom; ++i) { res.push_back(array[i][right]); } if (top != bottom) { for (int i = right - 1; i >= left; --i) { res.push_back(array[bottom][i]); } } if (left != right) { for (int i = bottom - 1; i > top; --i) { res.push_back(array[i][left]); } } ++left; --right; ++top; --bottom; } return res; } };","title":"JZ29  \u87ba\u65cb\u904d\u5386\u4e8c\u7ef4\u6570\u7ec4"},{"location":"JZ30-%E6%9C%80%E5%B0%8F%E6%A0%88/","text":"\u6700\u5c0f\u6808 \u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a \u6700\u5c0f\u6808 \u3002\u5b83\u63d0\u4f9b push \uff0cpop \uff0ctop \u64cd\u4f5c\uff0c\u5e76\u80fd\u5728\u5e38\u6570\u65f6\u95f4\u5185\u68c0\u7d22\u5230\u6700\u5c0f\u5143\u7d20\u7684\u6808\u3002 \u5b9e\u73b0 MinStack \u7c7b: MinStack() \u521d\u59cb\u5316\u5806\u6808\u5bf9\u8c61\u3002 void push(int val) \u5c06\u5143\u7d20val\u63a8\u5165\u5806\u6808\u3002 void pop() \u5220\u9664\u5806\u6808\u9876\u90e8\u7684\u5143\u7d20\u3002 int top() \u83b7\u53d6\u5806\u6808\u9876\u90e8\u7684\u5143\u7d20\u3002 int getMin() \u83b7\u53d6\u5806\u6808\u4e2d\u7684\u6700\u5c0f\u5143\u7d20\u3002 class MinStack { public: /** initialize your data structure here. */ stack<int> s1; stack<int> s2; MinStack() { } void push(int x) { s1.push(x); if (s2.size() == 0) { s2.push(x); } else { int data = s2.top(); if (x < data) { s2.push(x); } else { s2.push(data); } } } void pop() { s1.pop(); s2.pop(); } int top() { return s1.top(); } int getMin() { return s2.top(); } }; /** * Your MinStack object will be instantiated and called as such: * MinStack* obj = new MinStack(); * obj->push(x); * obj->pop(); * int param_3 = obj->top(); * int param_4 = obj->getMin(); */","title":"JZ30 \u6700\u5c0f\u6808"},{"location":"JZ31-%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E3%80%81%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/","text":"\u8f93\u5165\u4e24\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u5e8f\u5217\u8868\u793a\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u8bf7\u5224\u65ad\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u662f\u5426\u53ef\u80fd\u4e3a\u8be5\u6808\u7684\u5f39\u51fa\u987a\u5e8f\u3002\u5047\u8bbe\u538b\u5165\u6808\u7684\u6240\u6709\u6570\u5b57\u5747\u4e0d\u76f8\u7b49\u3002\u4f8b\u5982\u5e8f\u52171,2,3,4,5\u662f\u67d0\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u5e8f\u52174,5,3,2,1\u662f\u8be5\u538b\u6808\u5e8f\u5217\u5bf9\u5e94\u7684\u4e00\u4e2a\u5f39\u51fa\u5e8f\u5217\uff0c\u4f464,3,5,1,2\u5c31\u4e0d\u53ef\u80fd\u662f\u8be5\u538b\u6808\u5e8f\u5217\u7684\u5f39\u51fa\u5e8f\u5217\u3002 \u8f93\u5165\uff1a [1,2,3,4,5],[4,5,3,2,1] \u8fd4\u56de\u503c\uff1a true \u89e3\u6cd5\uff1a\u6a21\u62df\u6808\uff0c\u5224\u65ad\u6808\u662f\u5426\u7a7a\uff0c\u7a7a\u5219\u4ee3\u8868\u5339\u914d\uff0c\u5426\u5219\u4e0d\u5339\u914d * \u65f6\u95f4\u590d\u6742\u5ea6o(n) * \u7a7a\u95f4\u590d\u6742\u5ea6o(n) class Solution { public: bool validateBookSequences(vector<int>& putIn, vector<int>& takeOut) { stack<int> s1; int index = 0; for (auto& push_item : putIn) { s1.push(push_item); while (!s1.empty()) { if (s1.top() == takeOut[index]) { s1.pop(); ++index; } else { break; } } } return s1.empty(); } };","title":"JZ31 \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217"},{"location":"JZ32-%E4%BB%8E%E4%B8%8A%E5%BE%80%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/","text":"\u4e0d\u5206\u884c\u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u540c\u5c42\u8282\u70b9\u4ece\u5de6\u81f3\u53f3\u6253\u5370\u3002\u4f8b\u5982\u8f93\u5165{8,6,10,#,#,2,1}\uff0c\u5982\u4ee5\u4e0b\u56fe\u4e2d\u7684\u793a\u4f8b\u4e8c\u53c9\u6811\uff0c\u5219\u4f9d\u6b21\u6253\u53708,6,10,2,1(\u7a7a\u8282\u70b9\u4e0d\u6253\u5370\uff0c\u8df3\u8fc7)\uff0c\u8bf7\u4f60\u5c06\u6253\u5370\u7684\u7ed3\u679c\u5b58\u653e\u5230\u4e00\u4e2a\u6570\u7ec4\u91cc\u9762\uff0c\u8fd4\u56de\u3002 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public: vector<int> decorateRecord(TreeNode* root) { vector<int> res; queue<TreeNode*> q; if (root == nullptr) { return res; } q.push(root); while (q.size() != 0) { TreeNode* temp = q.front(); q.pop(); res.push_back(temp->val); if (temp->left != nullptr) { q.push(temp->left); } if (temp->right != nullptr) { q.push(temp->right); } } return res; } }; // \u6309\u884c\u6253\u5370, // [\u5982\u679c\u662f\u5947\u6570\u884c\u4ece\u505a\u5de6\u5230\u53f3\uff0c\u5076\u6570\u884c\u4ece\u53f3\u5230\u5de6\uff0c\u8bbe\u7f6eindex\u5224\u65ad\u5947\u5076\u884c\uff0c\u8fdb\u884creverse(v.begin(), v.end());] // \u4ece\u5e95\u90e8\u5411\u4e0a\u5c42\u6b21\u904d\u5386\u5c31\u9700\u8981\u5c06\u6700\u5916\u5c42\u7684vector\u8fdb\u884c\u53cd\u8f6c class Solution { public: vector<vector<int>> decorateRecord(TreeNode* root) { vector<vector<int>> res; queue<TreeNode*> q; q.push(root); if (root == nullptr) { return res; } while (q.size() != 0) { vector<int> v; int len = q.size(); while (len > 0) { TreeNode* temp = q.front(); q.pop(); v.push_back(temp->val); if (temp->left != nullptr) { q.push(temp->left); } if (temp->right != nullptr) { q.push(temp->right); } --len; } res.push_back(v); } return res; } };","title":"JZ32 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811"},{"location":"JZ33-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/","text":"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u6574\u6570\u6570\u7ec4 postorder \u662f\u5426\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7ed3\u679c\u3002 \u89e3\u6cd5\uff1a * \u641c\u7d22\u4e8c\u53c9\u6811\uff0c\u505a\u8282\u70b9\u5c0f\u4e8e\u6839\u8282\u70b9\uff0c\u6839\u8282\u70b9\u5c0f\u4e8e\u53f3\u8282\u70b9 * \u6700\u6709\u4e00\u4e2a\u8282\u70b9\u662f\u6839\u8282\u70b9\uff0c\u5224\u65ad\u524d\u9762\u7684\u5e8f\u5217\u548c\u6839\u8282\u70b9\u7684\u5927\u5c0f\u5207\u5206\u5de6\u53f3\u5206\u652f class Solution { public: bool verifyTreeOrder(vector<int>& postorder) { bool flag = check(postorder, 0, postorder.size() - 1); return flag; } bool check(vector<int>& postorder, int start, int end) { if (start >= end) { return true; } int root_value = postorder[end]; int i; for (i = start; i < end; ++i) { if (postorder[i] > root_value) { break; } } int j = i; for (; j < end; ++j) { if (postorder[j] < root_value) { return false; } } bool left = true; if (i > 0) { left = check(postorder, start, i - 1); } bool right = true; if (i < end) { right = check(postorder, i, end - 1); } return left && right; } };","title":"JZ33 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217"},{"location":"JZ34-%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%92%8C%E4%B8%BA%E6%9F%90%E4%B8%80%E5%80%BC%E7%9A%84%E8%B7%AF%E5%BE%84%28%E4%BA%8C%29/","text":"\u7ed9\u4f60\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \u548c\u4e00\u4e2a\u6574\u6570\u76ee\u6807\u548c targetSum \uff0c\u627e\u51fa\u6240\u6709 \u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9 \u8def\u5f84\u603b\u548c\u7b49\u4e8e\u7ed9\u5b9a\u76ee\u6807\u548c\u7684\u8def\u5f84\u3002 \u53f6\u5b50\u8282\u70b9 \u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002 \u89e3\u6cd5\uff1a\u6811\u7684\u524d\u5e8f\u5217\u904d\u5386\uff0c\u53ef\u4ee5\u5f97\u5230\u6839\u5230\u53f6\u5b50\u8282\u70b9\u7684\u5e8f\u5217\uff0c\u5982\u679c\u548c\u5339\u914d\u5219\u8bb0\u5f55\u8fd9\u4e2a\u5e8f\u5217\uff0c\u5426\u5219\u5c06\u5f53\u524d\u7684\u503c\u53bb\u9664\uff0c\u63a5\u7740\u904d\u5386 class Solution { public: vector<vector<int>> res; vector<int> v; vector<vector<int>> pathTarget(TreeNode* root, int target) { if (root == nullptr) { return res; } int val = root->val; v.push_back(val); target -= val; if (root->left == nullptr && root->right == nullptr && target == 0) { res.push_back(v); } pathTarget(root->left, target); pathTarget(root->right, target); v.pop_back(); return res; } };","title":"JZ34 \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84(\u4e8c)"},{"location":"JZ35-%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/","text":"\u8bf7\u5b9e\u73b0 copyRandomList \u51fd\u6570\uff0c\u590d\u5236\u4e00\u4e2a\u590d\u6742\u94fe\u8868\u3002\u5728\u590d\u6742\u94fe\u8868\u4e2d\uff0c\u6bcf\u4e2a\u8282\u70b9\u9664\u4e86\u6709\u4e00\u4e2a next \u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u8fd8\u6709\u4e00\u4e2a random \u6307\u9488\u6307\u5411\u94fe\u8868\u4e2d\u7684\u4efb\u610f\u8282\u70b9\u6216\u8005 null\u3002 \u89e3\u6cd5\u89c1\u6ce8\u91ca class Solution { public: Node* copyRandomList(Node* head) { Node* p = head; if (head == nullptr) { return nullptr; } // 1 \u590d\u5236\u8282\u70b9\u5728\u539f\u59cb\u8282\u70b9\u540e while (p != nullptr) { Node* temp_node = new Node(p->val); temp_node->next = p->next; p->next = temp_node; p = temp_node->next; } // 2 \u590d\u5236random\u6307\u9488 p = head; while (p != nullptr) { Node* temp_node = p->next; if (p->random == NULL) { temp_node->random = NULL; } else { temp_node->random = p->random->next; } p = temp_node->next; } // 3 \u5c06\u94fe\u8868\u62c6\u5f00 p = head; Node* read_head = p->next; Node* read_node = read_head; while (p != nullptr) { p->next = read_node->next; if (read_node->next != nullptr) { read_node->next = read_node->next->next; } else { read_node->next = nullptr; } p = p->next; read_node = read_node->next; } return read_head; } };","title":"JZ35 \u590d\u6742\u94fe\u8868\u7684\u590d\u5236"},{"location":"JZ36-%E5%B0%86%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BD%AC%E5%8C%96%E4%B8%BA%E6%8E%92%E5%BA%8F%E7%9A%84%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/","text":"\u5c06\u4e00\u4e2a \u4e8c\u53c9\u641c\u7d22\u6811 \u5c31\u5730\u8f6c\u5316\u4e3a\u4e00\u4e2a \u5df2\u6392\u5e8f\u7684\u53cc\u5411\u5faa\u73af\u94fe\u8868 \u3002 \u5bf9\u4e8e\u53cc\u5411\u5faa\u73af\u5217\u8868\uff0c\u4f60\u53ef\u4ee5\u5c06\u5de6\u53f3\u5b69\u5b50\u6307\u9488\u4f5c\u4e3a\u53cc\u5411\u5faa\u73af\u94fe\u8868\u7684\u524d\u9a71\u548c\u540e\u7ee7\u6307\u9488\uff0c\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u524d\u9a71\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u540e\u7ee7\u662f\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002 \u89e3\u6cd5\uff1a\u4e2d\u5e8f\u904d\u5386,\u5c06\u4e2d\u5e8f\u904d\u5386\u6bcf\u4e2a\u8282\u70b9\uff0c\u5e76\u5c06\u6bcf\u4e2a\u8282\u70b9\u8fde\u63a5\u8d77\u6765 class Solution { public: Node* read_head = nullptr; Node* p = nullptr; void change_tree(Node* root) { if (root == nullptr) { return; } treeToDoublyList(root->left); if (read_head == nullptr) { read_head = root; p = root; } else { p->right = root; root->left = p; p = root; } treeToDoublyList(root->right); return; } Node* treeToDoublyList(Node* root) { change_tree(root); if (read_head == nullptr) { return nullptr; } p->right = read_head; read_head->left = p; return read_head; } };","title":"JZ36 \u5c06\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u5316\u4e3a\u6392\u5e8f\u7684\u53cc\u5411\u94fe\u8868"},{"location":"JZ37-%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BA%8C%E5%8F%89%E6%A0%91/","text":"\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u6811 \u89e3\u6cd5\uff1a class Codec { public: // Encodes a tree to a single string. string res = \"\"; void get_tree_string(TreeNode* root) { if (root == nullptr) { res += \"$,\"; return; } res += to_string(root->val); res += ','; get_tree_string(root->left); get_tree_string(root->right); } string serialize(TreeNode* root) { get_tree_string(root); cout << res; return res; } // Decodes your encoded data to tree. TreeNode* deserialize(string data) { list<string> dataArray; string str; for (auto& ch : data) { if (ch == ',') { dataArray.push_back(str); str.clear(); } else { str.push_back(ch); } } if (!str.empty()) { dataArray.push_back(str); str.clear(); } return rdeserialize(dataArray); } TreeNode* rdeserialize(list<string>& dataArray) { if (dataArray.front() == \"$\") { dataArray.erase(dataArray.begin()); return nullptr; } TreeNode* root = new TreeNode(stoi(dataArray.front())); dataArray.erase(dataArray.begin()); root->left = rdeserialize(dataArray); root->right = rdeserialize(dataArray); return root; } };","title":"JZ37 \u5e8f\u5217\u5316\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u6811"}]}